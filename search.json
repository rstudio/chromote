[{"path":"http://rstudio.github.io/chromote/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Winston Chang. Author, maintainer. Barret Schloerke. Author. . Copyright holder, funder.","code":""},{"path":"http://rstudio.github.io/chromote/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chang W, Schloerke B (2023). chromote: Headless Chrome Web Browser Interface. R package version 0.1.2.9000,  https://github.com/rstudio/chromote, https://rstudio.github.io/chromote/.","code":"@Manual{,   title = {chromote: Headless Chrome Web Browser Interface},   author = {Winston Chang and Barret Schloerke},   year = {2023},   note = {R package version 0.1.2.9000,  https://github.com/rstudio/chromote},   url = {https://rstudio.github.io/chromote/}, }"},{"path":"http://rstudio.github.io/chromote/index.html","id":"chromote-headless-chrome-remote-interface","dir":"","previous_headings":"","what":"Headless Chrome Web Browser Interface","title":"Headless Chrome Web Browser Interface","text":"Chromote R implementation Chrome DevTools Protocol. works Chrome, Chromium, Opera, Vivaldi, browsers based Chromium. default uses Google Chrome (must already installed system). use different browser, see Specifying browser use. Chromote R package implements Chrome DevTools Protocol. others: crrri Romain Lesur Christophe Dervieux decapitated Bob Rudis chradle Miles McBain interface Chromote similar chrome-remote-interface node.js.","code":""},{"path":"http://rstudio.github.io/chromote/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Headless Chrome Web Browser Interface","text":"","code":"# CRAN install.packages(\"chromote\")  # Development remotes::install_github(\"rstudio/chromote\")"},{"path":"http://rstudio.github.io/chromote/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Headless Chrome Web Browser Interface","text":"start headless browser open interactive viewer normal browser, can see headless browser . browser can given commands, specified Chrome DevTools Protocol. example, $Browser$getVersion() (corresponds Browser.getVersion API docs) query browser version information: viewer open run following, ’ll see web page load viewer: official Chrome DevTools Protocol (CDP) documentation, Page.navigate command. addition full support CDP, ChromoteSession objects also convenience methods, like $screenshot(). (See Examples section information screenshots.)  Note: members Chromote ChromoteSession objects start capital letter (like b$Page, b$DOM, b$Browser) correspond domains Chrome DevTools Protocol, documented official CDP site. members start lower-case letter (like b$screenshot b$close) part Chrome DevTools Protocol, specific Chromote ChromoteSession. example use Chromote find position DOM element using DOM.getBoxModel. can thing chaining commands together magrittr pipe:","code":"library(chromote)  b <- ChromoteSession$new()  # In a web browser, open a viewer for the headless browser. Works best with # Chromium-based browsers. b$view() b$Browser$getVersion() #> $protocolVersion #> [1] \"1.3\" #> #> $product #> [1] \"HeadlessChrome/98.0.4758.102\" #> #> $revision #> [1] \"@273bf7ac8c909cde36982d27f66f3c70846a3718\" #> #> $userAgent #> [1] \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/98.0.4758.102 Safari/537.36\" #> #> $jsVersion #> [1] \"9.8.177.11\" b$Page$navigate(\"https://www.r-project.org/\") # Saves to screenshot.png b$screenshot()  # Takes a screenshot of elements picked out by CSS selector b$screenshot(\"sidebar.png\", selector = \".sidebar\") x <- b$DOM$getDocument() x <- b$DOM$querySelector(x$root$nodeId, \".sidebar\") x <- b$DOM$getBoxModel(x$nodeId) str(x) #> List of 1 #>  $ model:List of 6 #>   ..$ content:List of 8 #>   .. ..$ : num 128 #>   .. ..$ : int 28 #>   .. ..$ : num 292 #>   .. ..$ : int 28 #>   .. ..$ : num 292 #>   .. ..$ : num 988 #>   .. ..$ : num 128 #>   .. ..$ : num 988 #>   ..$ padding:List of 8 #>   .. ..$ : num 112 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : num 988 #>   .. ..$ : num 112 #>   .. ..$ : num 988 #>   ..$ border :List of 8 #>   .. ..$ : num 112 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : num 988 #>   .. ..$ : num 112 #>   .. ..$ : num 988 #>   ..$ margin :List of 8 #>   .. ..$ : int 15 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : num 1030 #>   .. ..$ : int 15 #>   .. ..$ : num 1030 #>   ..$ width  : int 195 #>   ..$ height : int 960 b$DOM$getDocument() %>%   { b$DOM$querySelector(.$root$nodeId, \".sidebar\") } %>%   { b$DOM$getBoxModel(.$nodeId) } %>%   str() #> List of 1 #>  $ model:List of 6 #>   ..$ content:List of 8 #>   .. ..$ : num 128 #>   .. ..$ : int 28 #>   .. ..$ : num 292 #>   .. ..$ : int 28 #>   .. ..$ : num 292 #>   .. ..$ : num 988 #>   .. ..$ : num 128 #>   .. ..$ : num 988 #>   ..$ padding:List of 8 #>   .. ..$ : num 112 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : num 988 #>   .. ..$ : num 112 #>   .. ..$ : num 988 #>   ..$ border :List of 8 #>   .. ..$ : num 112 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : num 988 #>   .. ..$ : num 112 #>   .. ..$ : num 988 #>   ..$ margin :List of 8 #>   .. ..$ : int 15 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : num 1030 #>   .. ..$ : int 15 #>   .. ..$ : num 1030 #>   ..$ width  : int 195 #>   ..$ height : int 960"},{"path":"http://rstudio.github.io/chromote/index.html","id":"creating-new-tabs-and-managing-the-process","dir":"","previous_headings":"Basic usage","what":"Creating new tabs and managing the process","title":"Headless Chrome Web Browser Interface","text":"create new tab/window: ’s created, can perform operations new tab without affecting first one. close browser tab/window, can run: different shutting browser process. call b$close(), browser process still running, even tabs closed. tabs closed, can still create new tab calling b1$new_session(). shut process, call: b1$parent Chromote object (opposed ChromoteSession), represents browser whole. explained Chromote object model.","code":"b1 <- b$new_session() b1$view() b1$Page$navigate(\"https://github.com/rstudio/chromote\") #> $frameId #> [1] \"714439EBDD663E597658503C86F77B0B\" #> #> $loaderId #> [1] \"F39339CBA7D1ACB83618FEF40C3C7467\" b1$close() b1$parent$close()"},{"path":"http://rstudio.github.io/chromote/index.html","id":"commands-and-events","dir":"","previous_headings":"Basic usage","what":"Commands and Events","title":"Headless Chrome Web Browser Interface","text":"Chrome DevTools Protocol two types methods: commands events. methods used previous examples commands. , tell browser something; browser , sends back data. Events quite different commands. , example, run b$Page$loadEventFired(), send message browser. Rather, method tells R process wait receives Page.loadEventFired message browser. example event can used. Note two lines code must run together, without delay (can enforced wrapping lines code { .... }). running two lines, R process blocked. ’s blocked, browser load page, send message R process saying Page.loadEventFired event occurred. message looks something like : R process receives message, function returns value, looks like : Technical note: Chromote insulates user details CDP implements event notifications. Event notifications sent browser R process default; must first send command enable event notifications domain. example Page.enable enables event notifications Page domain – browser send messages Page events. (See Events section page). notifications continue sent browser receives Page.disable command. default, Chromote hides implementation detail. call b$Page$loadEventFired(), Chromote sends Page.enable command automatically, waits receives Page.loadEventFired event notification. sends Page.disable command. Note asynchronous mode, behavior slightly sophisticated: maintains counter many outstanding events waiting given domain. count goes 0 1, sends X.enable command; count goes 1 0, sends X.disable command. information, see Async events section. want automatic event enabling disabling, creating ChromoteSession object, use ChromoteSession$new(auto_events = FALSE).","code":"# Send a command to navigate to a page b$Page$navigate(\"https://www.r-project.org\") #> $frameId #> [1] \"0ADE3CFBAF764B0308ADE1ACCC33358B\" #> #> $loaderId #> [1] \"112AF4AC0C13FF4A95BED8173C3F4C7F\"  # Wait for the Page.loadEventFired event b$Page$loadEventFired() #> $timestamp #> [1] 680.7603 {\"method\":\"Page.loadEventFired\",\"params\":{\"timestamp\":699232.345338}} $timestamp [1] 699232.3"},{"path":"http://rstudio.github.io/chromote/index.html","id":"the-chromote-object-model","dir":"","previous_headings":"Basic usage","what":"The Chromote object model","title":"Headless Chrome Web Browser Interface","text":"two R6 classes used represent Chrome browser. One Chromote, ChromoteSession. Chromote object represents browser whole, can multiple targets, represent browser tab. Chrome DevTools Protocol, target can one debugging sessions control . ChromoteSession object represents single session. ChromoteSession object instantiated, target created, session attached target, ChromoteSession object represents session. (possible, though useful, multiple ChromoteSession objects connected target, different session.) Chromote object can number ChromoteSession objects children. necessary create Chromote object manually. can simply call: automatically create Chromote object one already created. Chromote package designate Chromote object default Chromote object package, future calls ChromoteSession$new() automatically use Chromote. doesn’t start new browser every ChromoteSession object created. Chrome DevTools Protocol, commands can sent individual sessions using ChromoteSession object, commands can sent overall browser, using Chromote object. access parent Chromote object ChromoteSession, can simply use $parent: Chromote object, can get list containing ChromoteSessions, $get_sessions(): Normally, subsequent calls ChromoteSession$new() use existing Chromote object. However, want start new browser process, can manually create Chromote object, spawn session ; can pass new Chromote object ChromoteSession$new(): Note use either methods, new Chromote object set default used future calls ChromoteSesssion$new(). See Specifying browser use information setting default Chromote object. also following classes represent browser lower level: Browser: represents instance browser supports Chrome DevTools Protocol. contains information communicate Chrome browser. Chromote object contains one . Chrome: subclass Browser represents local browser. extends Browser class processx::process object, represents browser’s system process. ChromeRemote: subclass Browser represents browser running remote system.","code":"b <- ChromoteSession$new() b <- ChromoteSession$new() m <- b$parent m$get_sessions() cm <- Chromote$new() b1 <- cm$new_session()  # Or: b1 <- ChromoteSession$new(parent = cm)"},{"path":"http://rstudio.github.io/chromote/index.html","id":"debugging","dir":"","previous_headings":"Basic usage","what":"Debugging","title":"Headless Chrome Web Browser Interface","text":"Calling b$debug_messages(TRUE) enable printing JSON messages sent R Chrome. can helpful understanding Chrome DevTools Protocol works.","code":"b <- ChromoteSession$new() b$parent$debug_messages(TRUE) b$Page$navigate(\"https://www.r-project.org/\") #> SEND {\"method\":\"Page.navigate\",\"params\":{\"url\":\"https://www.r-project.org/\"},\"id\":53,\"sessionId\":\"12CB6B044A379DA0BDCFBBA55318247C\"} #> $frameId #> [1] \"BAAC175C67E55886207BADE1776E7B1F\" #> #> $loaderId #> [1] \"66DED3DF9403DA4A307444765FDE828E\"  # Disable debug messages b$parent$debug_messages(FALSE)"},{"path":"http://rstudio.github.io/chromote/index.html","id":"synchronous-vs-asynchronous-usage","dir":"","previous_headings":"Basic usage","what":"Synchronous vs. asynchronous usage","title":"Headless Chrome Web Browser Interface","text":"default, call methods Chromote ChromoteSession object, operates synchronous mode. example, call command function (like b$Page$navigate()), command message sent headless browser, headless browser executes command, sends response message back. R process receives response, converts JSON R object function returns value. time, R process blocked; R code can execute. methods Chromote/ChromoteSession objects can also called asynchronous mode. async mode, command function fires message browser, R process continues running code; response comes back time future, R process calls another function passes response value . two different ways using async Chromote. first promises (note regular R-language promises; similar JavaScript promises async programming.) second way callbacks: call methods callback_ argument. Although callbacks initially easier use promises, start writing complex code, managing callbacks becomes difficult, especially error handling involved. reason, document focus mostly promises instead callback-style programming. Chromote methods called synchronous mode, hood, implemented asynchronous functions, waiting asynchronous functions resolve. Technical note event loop: methods called asynchronously, R process run callbacks promises using event loop provided later package. event loop similar one used JavaScript, explained depth Philip Roberts video. One important difference JavaScript’s event loop one provided later’s JavaScript, event loop runs call stack empty (essentially, JS runtime idle); later event loop similarly runs call stack empty (R console idle), can also run point calling later::run_now(). another important difference JS event loop one used Chromote: Chromote uses private event loops provided later. Running private event loop run_now() interfere global event loop. crucial able run asynchronous code way appears synchronous.","code":""},{"path":"http://rstudio.github.io/chromote/index.html","id":"why-async","dir":"","previous_headings":"Basic usage > Synchronous vs. asynchronous usage","what":"Why async?","title":"Headless Chrome Web Browser Interface","text":"synchronous API easier use asynchronous one. want use async API? reasons: async API allows send commands browser may take time browser complete, block R process work browser executes command. async API lets send commands multiple browser “tabs” let work parallel. hand, async programming can make difficult write code proceeds straightforward, linear manner. Async programming may difficult use , say, analysis script. using Chromote interactively R console, ’s usually best just call methods synchronously. fits well iterative, interactive data analysis workflow. programming Chromote instead using interactively, many cases better call methods asynchronously, allows better performance. later section, ’ll see write asynchronous code Chromote can run either synchronously asynchronously. provides best worlds.","code":""},{"path":"http://rstudio.github.io/chromote/index.html","id":"async-commands","dir":"","previous_headings":"Basic usage > Synchronous vs. asynchronous usage","what":"Async commands","title":"Headless Chrome Web Browser Interface","text":"method called synchronous mode, blocks browser sends back response, returns value, converted JSON R object. example: async mode, two ways use value browser sends R process. One use callback_ argument wait_=FALSE. wait_=FALSE tells run command async mode; instead returning value browser, returns promise. example: Notice function returned <Promise [pending]>, printed data. ’ll come back promise part. Technical note: pass function callback_, function used first step promise chain returned. run command code block (function), entire code block finish executing callback can executed. example: code , executes 1+1 returns value str callback can executed message browser. want store value browser, can write callback stores value like : get value, need wait callback execute can use value. Waiting value simple running R interactively – can just add message(\"message arrived\") call callback wait running next line code – waiting value easy using ordinary straight-line coding. Fortunately, Chromote way wait async operations, ’ll see later. way using value use promises. wait_=FALSE callback_ passed command, simply return promise. Promises many advantages plain old callbacks: easier chain, provide better error-handling capabilities. can chain steps promise: promise resolves – , message received browser – run next step promise chain. ’s example uses promises print version information. Note surrounding curly braces indicate whole thing must run block without idle time function calls – run code R console line--line, browser send back message promise resolve called p$(), tell promise return value. (curly braces aren’t strictly necessary – run code inside braces single paste operation effect.) progressively concise ways achieving thing. work promises, see various forms promise chaining. information, see promises documentation. earlier example found dimensions DOM element using CSS selectors done synchronous API %>% pipes. can done async mode switching regular pipe promise-pipe, calling methods wait_=FALSE: step promise chain uses value previous step, via . value. Note asynchronous code works linear, straightforward way. Sometimes necessary save data intermediate steps broader-scoped variable, used later step promise chain.","code":"# Synchronous str(b$Browser$getVersion()) #> List of 5 #>  $ protocolVersion: chr \"1.3\" #>  $ product        : chr \"HeadlessChrome/98.0.4758.102\" #>  $ revision       : chr \"@273bf7ac8c909cde36982d27f66f3c70846a3718\" #>  $ userAgent      : chr \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/98.0.4758.102 Safari/537.36\" #>  $ jsVersion      : chr \"9.8.177.11\" # Async with callback b$Browser$getVersion(wait_ = FALSE, callback_ = str) #> <Promise [pending]> #> List of 5 #>  $ protocolVersion: chr \"1.3\" #>  $ product        : chr \"HeadlessChrome/98.0.4758.102\" #>  $ revision       : chr \"@273bf7ac8c909cde36982d27f66f3c70846a3718\" #>  $ userAgent      : chr \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/98.0.4758.102 Safari/537.36\" #>  $ jsVersion      : chr \"9.8.177.11\" {   b$Browser$getVersion(wait_ = FALSE, callback_ = str)   1+1 } #> [1] 2 #> List of 5 #>  $ protocolVersion: chr \"1.3\" #>  $ product        : chr \"HeadlessChrome/98.0.4758.102\" #>  $ revision       : chr \"@273bf7ac8c909cde36982d27f66f3c70846a3718\" #>  $ userAgent      : chr \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/98.0.4758.102 Safari/537.36\" #>  $ jsVersion      : chr \"9.8.177.11\" # This will extract the product field product <- NULL b$Browser$getVersion(wait_ = FALSE, callback_ = function(msg) {   product <<- msg$product }) #> <Promise [pending]> # Wait for a moment, then run: product #> [1] \"HeadlessChrome/98.0.4758.102\" {   p <- b$Browser$getVersion(wait_ = FALSE)   p$then(function(value) {     print(value$product)   }) } # Wait for a moment, then prints: #> [1] \"HeadlessChrome/98.0.4758.102\" library(promises)  # Regular function pipe to then() b$Browser$getVersion(wait_ = FALSE) %>% then(function(value) {   print(value$product) })  # Promise-pipe to anonymous function, which must be wrapped in parens b$Browser$getVersion(wait_ = FALSE) %...>% (function(value) {   print(value$product) })  # Promise-pipe to an expression (which gets converted to a function with the first argument `.`) b$Browser$getVersion(wait_ = FALSE) %...>% { print(.$product) }  # Promise-pipe to a named function, with parentheses print_product <- function(msg) print(msg$product) b$Browser$getVersion(wait_ = FALSE) %...>% print_product()  # Promise-pipe to a named function, without parentheses b$Browser$getVersion(wait_ = FALSE) %...>% print_product b$DOM$getDocument(wait_ = FALSE) %...>%   { b$DOM$querySelector(.$root$nodeId, \".sidebar\", wait_ = FALSE) } %...>%   { b$DOM$getBoxModel(.$nodeId, wait_ = FALSE) } %...>%   str()   # Or, more verbosely: b$DOM$getDocument(wait_ = FALSE)$   then(function(value) {     b$DOM$querySelector(value$root$nodeId, \".sidebar\", wait_ = FALSE)   })$   then(function(value) {     b$DOM$getBoxModel(value$nodeId, wait_ = FALSE)   })$   then(function(value) {     str(value)   })"},{"path":"http://rstudio.github.io/chromote/index.html","id":"turning-asynchronous-code-into-synchronous-code","dir":"","previous_headings":"Basic usage > Synchronous vs. asynchronous usage","what":"Turning asynchronous code into synchronous code","title":"Headless Chrome Web Browser Interface","text":"may times, especially programming Chromote, want wait promise resolve continuing. , can use Chromote ChromoteSession’s wait_for() method. documentation refer technique synchronizing asynchronous code. way wait_for() works runs Chromote object’s private event loop promise resolved. event loop private, running interfere global event loop, , example, may used Shiny serve web application. $wait_for() method return value promise, instead putting str() chain, call str() value returned $wait_for(): methods Chromote ChromoteSession objects written using asynchronous method calls, conditionally use wait_for() can called either synchronously asynchronously. $screenshot() method works way, example. can call b$screenshot(wait_=TRUE) (default) synchronous behavior, b$screenshot(wait_=FALSE) async behavior. want write function can called either sync async mode, can use basic structure: First, construct promise chain calling CDP methods wait_=FALSE. , end, user used wait_=TRUE, wait promise resolve; otherwise, simply return promise. , might wondering, want synchronous API, simply write synchronous code calling individual methods synchronously, using normal pipe connect , : two reasons . first require duplication code sync async code paths. Another reason internal async code can written send multiple independent command chains ChromoteSession (multiple ChromoteSessions), executed concurrently. multiple promise chains, can something like following wait resolve:","code":"# A promise chain p <- b$DOM$getDocument(wait_ = FALSE) %...>%   { b$DOM$querySelector(.$root$nodeId, \".sidebar\", wait_ = FALSE) } %...>%   { b$DOM$getBoxModel(.$nodeId, wait_ = FALSE) } %...>%   str()  b$wait_for(p) #> List of 1 #>  $ model:List of 6 #>   ..$ content:List of 8 #>   .. ..$ : num 128 #>   .. ..$ : int 28 #>   .. ..$ : num 292 #>   .. ..$ : int 28 #>   .. ..$ : num 292 #>   .. ..$ : num 988 #>   .. ..$ : num 128 #>   .. ..$ : num 988 #>   ..$ padding:List of 8 #>   .. ..$ : num 112 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : num 988 #>   .. ..$ : num 112 #>   .. ..$ : num 988 #>   ..$ border :List of 8 #>   .. ..$ : num 112 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : num 988 #>   .. ..$ : num 112 #>   .. ..$ : num 988 #>   ..$ margin :List of 8 #>   .. ..$ : int 15 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : num 1030 #>   .. ..$ : int 15 #>   .. ..$ : num 1030 #>   ..$ width  : int 195 #>   ..$ height : int 960 p <- b$DOM$getDocument(wait_ = FALSE) %...>%   { b$DOM$querySelector(.$root$nodeId, \".sidebar\", wait_ = FALSE) } %...>%   { b$DOM$getBoxModel(.$nodeId, wait_ = FALSE) }  x <- b$wait_for(p) str(x) #> List of 1 #>  $ model:List of 6 #>   ..$ content:List of 8 #>   .. ..$ : num 128 #>   .. ..$ : int 28 #>   .. ..$ : num 292 #>   .. ..$ : int 28 #>   .. ..$ : num 292 #>   .. ..$ : num 988 #>   .. ..$ : num 128 #>   .. ..$ : num 988 #>   ..$ padding:List of 8 #>   .. ..$ : num 112 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : num 988 #>   .. ..$ : num 112 #>   .. ..$ : num 988 #>   ..$ border :List of 8 #>   .. ..$ : num 112 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : num 988 #>   .. ..$ : num 112 #>   .. ..$ : num 988 #>   ..$ margin :List of 8 #>   .. ..$ : int 15 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : int 28 #>   .. ..$ : num 308 #>   .. ..$ : num 1030 #>   .. ..$ : int 15 #>   .. ..$ : num 1030 #>   ..$ width  : int 195 #>   ..$ height : int 960 getBoxModel <- function(b, selector = \"html\", wait_ = TRUE) {   p <- b$DOM$getDocument(wait_ = FALSE) %...>%     { b$DOM$querySelector(.$root$nodeId, selector, wait_ = FALSE) } %...>%     { b$DOM$getBoxModel(.$nodeId, wait_ = FALSE) }    if (wait_) {     b$wait_for(p)   } else {     p   } }  # Synchronous call str(getBoxModel(b, \".sidebar\"))  # Asynchronous call getBoxModel(b, \".sidebar\", wait_ = FALSE) %...>%   str() b$DOM$getDocument() %>%   { b$DOM$querySelector(.$root$nodeId, \".sidebar\") } %>%   { b$DOM$getBoxModel(.$nodeId) } %>%   str() # Starting with promises p1, p2, and p3, create a promise that resolves only # after they have all been resolved. p <- promise_all(p1, p2, p3) b$wait_for(p)"},{"path":"http://rstudio.github.io/chromote/index.html","id":"async-events","dir":"","previous_headings":"","what":"Async events","title":"Headless Chrome Web Browser Interface","text":"addition commands Chrome DevTools Protocol also events. messages sent browser R process various browser events happen. example, can bit tricky find take screenshot. send browser command navigate page, sends response immediately, may take several seconds actually finish loading page. , Page.loadEventFired event fired. synchronous API, call b$Page$loadEventFired() block Chromote receives Page.loadEventFired message browser. However, async promise API, write like : short delay running code value printed. want schedule chain promises wait resolve, can use wait_for() method. example: particular example twist : sending Page.navigate command, R process doesn’t really need wait browser’s response starts waiting Page.loadEventFired event. instead chaining, just : Essentially, Page.navigate command gets sent don’t need wait browser’s reply. can tell R immediately start waiting Page.loadEventFired event. can simplify wrapping method calls promise. can just fire navigation command, directly use promise ’s returned event method: can make yet simpler firing navigation command calling b$Page$loadEventFired() synchronous mode (default wait_=TRUE), already calls wait_for(). Technical note: Chrome DevTools Protocol automatically enable event notifications. Normally, call Page.enable method turn event notifications Page domain. However, Chromote saves needing step keeping track many callbacks domain. number event callbacks domain goes 0 1, Chromote automatically calls $enable() domain, goes 1 0, calls $disable(). addition async events promises, can also used regular callbacks. example: tells Chromote call str() (prints console) message value every single time Page.loadEventFired event message received. continue indefinitely. (Calling event method way also increments event callback counter.) event method called callback, return value function cancel callback, longer fire. (canceller function also decrements event callback counter. lose canceller function, way decrement callback counter back 0.)","code":"b <- ChromoteSession$new()  # Navigate and wait for Page.loadEventFired. # Note: these lines are put in a single code block to ensure that there is no # idle time in between. {   b$Page$navigate(\"https://www.r-project.org/\")   str(b$Page$loadEventFired()) } #> List of 1 #>  $ timestamp: num 683 b$Page$navigate(\"https://www.r-project.org/\", wait_ = FALSE) %...>%   { b$Page$loadEventFired(wait_ = FALSE) } %...>%   { str(.) }  # Or, more verbosely: b$Page$navigate(\"https://www.r-project.org/\", wait_ = FALSE)$   then(function(value) {     b$Page$loadEventFired(wait_ = FALSE)   })$   then(function(value) {     str(value)   }) p <- b$Page$navigate(\"https://www.r-project.org/\", wait_ = FALSE)$   then(function(value) {     b$Page$loadEventFired(wait_ = FALSE)   })  # wait_for returns the last value in the chain, so we can call str() on it str(b$wait_for(p)) #> List of 1 #>  $ timestamp: num 683 p <- promise(function(resolve, reject) {   b$Page$navigate(\"https://www.r-project.org/\", wait_ = FALSE)   resolve(b$Page$loadEventFired(wait_ = FALSE)) })  str(b$wait_for(p)) #> List of 1 #>  $ timestamp: num 683 b$Page$navigate(\"https://www.r-project.org/\", wait_ = FALSE) p <- b$Page$loadEventFired(wait_ = FALSE) str(b$wait_for(p)) #> List of 1 #>  $ timestamp: num 683 b$Page$navigate(\"https://www.r-project.org/\", wait_ = FALSE) x <- b$Page$loadEventFired() str(x) #> List of 1 #>  $ timestamp: num 683 b$Page$loadEventFired(callback_ = str) cancel_load_event_callback <- b$Page$loadEventFired(callback_ = str)  # Each of these will cause the callback to fire. n1 <- b$Page$navigate(\"https://www.r-project.org/\") n2 <- b$Page$navigate(\"https://cran.r-project.org/\")  cancel_load_event_callback()  # No longer causes the callback to fire. n3 <- b$Page$navigate(\"https://www.rstudio.com/\")"},{"path":"http://rstudio.github.io/chromote/index.html","id":"resource-cleanup-and-garbage-collection","dir":"","previous_headings":"","what":"Resource cleanup and garbage collection","title":"Headless Chrome Web Browser Interface","text":"Chromote starts Chrome process, calls Chrome$new(). launches Chrome process using processx::process(), enables supervisor process. means R process stops, supervisor detect shut Chrome processes registered supervisor. prevents proliferation Chrome processes longer needed. Chromote package , default, use single Chrome process single Chromote object, time ChromoteSession$new() called, spawn Chromote object. See Chromote object model information.","code":""},{"path":"http://rstudio.github.io/chromote/index.html","id":"specifying-which-browser-to-use","dir":"","previous_headings":"","what":"Specifying which browser to use","title":"Headless Chrome Web Browser Interface","text":"Chromote look specific places Chrome web browser, depending platform. done chromote:::find_chrome() function. wish use different browser default, can set CHROMOTE_CHROME environment variable, either Sys.setenv(CHROMOTE_CHROME=\"/path//browser\"). Another way create Chromote object explicitly specify browser, spawn ChromoteSessions . Yet another way create Chromote object specified browser, set default Chromote object.","code":"Sys.setenv(CHROMOTE_CHROME = \"/Applications/Chromium.app/Contents/MacOS/Chromium\")  b <- ChromoteSession$new() b$view() b$Page$navigate(\"https://www.whatismybrowser.com/\") m <- Chromote$new(   browser = Chrome$new(path = \"/Applications/Chromium.app/Contents/MacOS/Chromium\") )  # Spawn a ChromoteSession from the Chromote object b <- m$new_session() b$Page$navigate(\"https://www.whatismybrowser.com/\") m <- Chromote$new(   browser = Chrome$new(path = \"/Applications/Chromium.app/Contents/MacOS/Chromium\") )  # Set this Chromote object as the default. Then any # ChromoteSession$new() will be spawned from it. set_default_chromote_object(m) b <- ChromoteSession$new() b$view() b$Page$navigate(\"https://www.whatismybrowser.com/\")"},{"path":"http://rstudio.github.io/chromote/index.html","id":"chrome-on-remote-hosts","dir":"","previous_headings":"","what":"Chrome on remote hosts","title":"Headless Chrome Web Browser Interface","text":"Chromote can control browser running remote host. start browser, open terminal remote host run one following, depending platform: Warning: Depending remote machine configured, Chrome debug server might accessible anyone Internet. Proceed caution. , local R session, create Chromote object host port (need use correct IP address). ’s created, can spawn session can control normal: use $view() remote browser, local browser may block scripts security reasons, means won’t able view remote browser. local browser Chrome, shield-shaped icon location bar can click order enable loading scripts. (Note: browsers don’t seem work viewer.) Technical note: seem timing issues remote browsers. example , browser may finish navigating web site R process receives response message $navigate(), therefore R starts waiting Page.loadEventFired. order avoid timing problems, may better write code like : tells fire Page.navigate command wait , immediately start waiting Page.loadEventFired event.","code":"# Mac \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\" --headless \\   --remote-debugging-address=0.0.0.0 --remote-debugging-port=9222  # Linux google-chrome --headless --remote-debugging-address=0.0.0.0 --remote-debugging-port=9222  # Windows \"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\"  --headless \\   --remote-debugging-address=0.0.0.0 --remote-debugging-port=9222 r <- Chromote$new(   browser = ChromeRemote$new(host = \"10.0.0.5\", port = 9222) )  b <- r$new_session()  b$Browser$getVersion() b$view() b$Page$navigate(\"https://www.whatismybrowser.com/\") b$Page$loadEventFired() b$screenshot(\"browser.png\") b$screenshot(\"browser_string.png\", selector = \".string-major\") {   b$Page$navigate(\"https://www.whatismybrowser.com/\", wait_ = FALSE)   b$Page$loadEventFired() } b$screenshot(\"browser.png\")"},{"path":"http://rstudio.github.io/chromote/index.html","id":"attaching-to-existing-tabs","dir":"","previous_headings":"Chrome on remote hosts","what":"Attaching to existing tabs","title":"Headless Chrome Web Browser Interface","text":"examples , connected existing browser, created new tab attach . ’s also possible attach existing browser existing tab. Chrome debugging terminology tab called “Target”, command retrieve list current Targets: Every target unique identifier string associated called targetId; \"9DAE349A3A533718ED9E17441BA5159B\" example one. define function retrieves ID first Target (tab) Chromote object: following code shows alert box first tab, whatever :","code":"r$Target$getTargets() first_id <- function(r) {   ts <- r$Target$getTargets()$targetInfos   stopifnot(length(ts) > 0)   r$Target$getTargets()$targetInfos[[1]]$targetId } rc <- ChromeRemote$new(host = \"localhost\", port = 9222) r <- Chromote$new(browser = rc) tid <- first_id(r) b <- r$new_session(targetId = tid) b$Runtime$evaluate('alert(\"this is the first tab\")')"},{"path":[]},{"path":"http://rstudio.github.io/chromote/index.html","id":"taking-a-screenshot-of-a-web-page","dir":"","previous_headings":"Examples","what":"Taking a screenshot of a web page","title":"Headless Chrome Web Browser Interface","text":"Take screenshot viewport display using showimage package. uses Chromote’s $screenshot() method, wraps many calls Chrome DevTools Protocol. also possible use selectors specify screenshot, well region (“content”, “border”, “padding”, “margin”). vector passed selector, take screenshot rectangle encompasses DOM elements picked selectors. Similarly, selector picks multiple DOM elements, screenshot region.","code":"b <- ChromoteSession$new()  # ==== Synchronous version ==== # Run the next two lines together, without any delay in between. b$Page$navigate(\"https://www.r-project.org/\") b$Page$loadEventFired()  b$screenshot(show = TRUE)  # Saves to screenshot.png and displays in viewer  # ==== Async version ==== b$Page$navigate(\"https://www.r-project.org/\", wait_ = FALSE) b$Page$loadEventFired(wait_ = FALSE)$   then(function(value) {     b$screenshot(show = TRUE)   }) # Using CSS selectors, choosing the region, and using scaling b$screenshot(\"s1.png\", selector = \".sidebar\") b$screenshot(\"s2.png\", selector = \".sidebar\", region = \"margin\") b$screenshot(\"s3.png\", selector = \".page\", region = \"margin\", scale = 2)"},{"path":"http://rstudio.github.io/chromote/index.html","id":"setting-width-and-height-of-the-viewport-window","dir":"","previous_headings":"Examples","what":"Setting width and height of the viewport (window)","title":"Headless Chrome Web Browser Interface","text":"default size ChromoteSession viewport 992 1323 pixels. can set width height created: existing ChromoteSession, can set size b$Emulation$setVisibleSize(): can take “Retina” (double) resolution screenshot using b$screenshot(scale=2):","code":"b <- ChromoteSession$new(width = 390, height = 844)  b$Page$navigate(\"https://www.r-project.org/\") b$screenshot(\"narrow.png\") b$Emulation$setVisibleSize(width=1600, height=900) b$screenshot(\"wide.png\") b$screenshot(\"wide-2x.png\", scale = 2)"},{"path":"http://rstudio.github.io/chromote/index.html","id":"taking-a-screenshot-of-a-web-page-after-interacting-with-it","dir":"","previous_headings":"Examples","what":"Taking a screenshot of a web page after interacting with it","title":"Headless Chrome Web Browser Interface","text":"Headless Chrome provides remote debugging UI can use interact web page. ChromoteSession’s $view() method opens regular browser navigates remote debugging UI. point, can interact web page typing text clicking things. take screenshot:","code":"b <- ChromoteSession$new()  b$view() b$Page$navigate(\"https://www.google.com\") # Or just type the URL in the navigation bar b$screenshot()"},{"path":"http://rstudio.github.io/chromote/index.html","id":"taking-screenshots-of-web-pages-in-parallel","dir":"","previous_headings":"Examples","what":"Taking screenshots of web pages in parallel","title":"Headless Chrome Web Browser Interface","text":"async code, ’s possible navigate take screenshots multiple websites parallel.","code":"library(promises) library(chromote) urls <- c(   \"https://www.r-project.org/\",   \"https://github.com/\",   \"https://news.ycombinator.com/\" )  screenshot_p <- function(url, filename = NULL) {   if (is.null(filename)) {     filename <- gsub(\"^.*://\", \"\", url)     filename <- gsub(\"/\", \"_\", filename)     filename <- gsub(\"\\\\.\", \"_\", filename)     filename <- sub(\"_$\", \"\", filename)     filename <- paste0(filename, \".png\")   }    b <- ChromoteSession$new()   b$Page$navigate(url, wait_ = FALSE)   b$Page$loadEventFired(wait_ = FALSE)$     then(function(value) {       b$screenshot(filename, wait_ = FALSE)     })$     then(function(value) {       message(filename)     })$     finally(function() {       b$close()     }) }  # Screenshot multiple simultaneously ps <- lapply(urls, screenshot_p) pa <- promise_all(.list = ps)$then(function(value) {   message(\"Done!\") })  # Block the console until the screenshots finish (optional) cm <- default_chromote_object() cm$wait_for(pa) #> www_r-project_org.png #> github_com.png #> news_ycombinator_com.png #> Done!"},{"path":"http://rstudio.github.io/chromote/index.html","id":"setting-custom-headers","dir":"","previous_headings":"Examples","what":"Setting custom headers","title":"Headless Chrome Web Browser Interface","text":"Currently setting custom headers requires little extra work requires Network.enable called using . future ’ll streamline things happen automatically.","code":"b <- ChromoteSession$new() # Currently need to manually enable Network domain notifications. Calling # b$Network$enable() would do it, but calling it directly will bypass the # callback counting and the notifications could get automatically disabled by a # different Network event. We'll enable notifications for the Network domain by # listening for a particular event. We'll also store a callback that will # decrement the callback counter, so that we can disable notifications ater. disable_network_notifications <- b$Network$responseReceived(function (msg) NULL) b$Network$setExtraHTTPHeaders(headers = list(   foo = \"bar\",   header1 = \"value1\" ))  # Visit a web page that prints out the request headers b$Page$navigate(\"http://scooterlabs.com/echo\") b$screenshot(show = TRUE)   # Unset extra headers. Note that `list(a=1)[0]` creates an empty _named_ list; # an empty unnamed list will cause an error because they're converted to JSON # differently. A named list becomes \"{}\", but an unnamed list becomes \"[]\". b$Network$setExtraHTTPHeaders(headers = list(a=1)[0])  # Request again b$Page$navigate(\"http://scooterlabs.com/echo\") b$screenshot(show = TRUE)   # Disable extra headers entirely, by decrementing Network callback counter, # which will disable Network notifications. disable_network_notifications()"},{"path":"http://rstudio.github.io/chromote/index.html","id":"custom-user-agent","dir":"","previous_headings":"Examples","what":"Custom User-Agent","title":"Headless Chrome Web Browser Interface","text":"Synchronous version:","code":"# ==== Synchronous version ==== b$Network$setUserAgentOverride(userAgent = \"My fake browser\")  b$Page$navigate(\"http://scooterlabs.com/echo\") b$screenshot(show = TRUE)   # ==== Async version ==== b$Network$setUserAgentOverride(userAgent = \"My fake browser\", wait_ = FALSE) b$Page$navigate(\"http://scooterlabs.com/echo\", wait_ = FALSE) b$Page$loadEventFired(wait_ = FALSE)$   then(function(value) {     b$screenshot(show = TRUE)   })"},{"path":"http://rstudio.github.io/chromote/index.html","id":"extracting-text-from-a-web-page","dir":"","previous_headings":"Examples","what":"Extracting text from a web page","title":"Headless Chrome Web Browser Interface","text":"One way extract text page tell browser run JavaScript code : Another way use CDP commands extract content DOM. require executing JavaScript browser’s context, also flexible JavaScript.","code":"# ==== Synchronous version ==== b$Page$navigate(\"https://www.whatismybrowser.com/\")  # Run JavaScript to extract text from the page x <- b$Runtime$evaluate('document.querySelector(\".corset .string-major a\").innerText') x$result$value #> [1] \"Chrome 75 on macOS (Mojave)\"   # ==== Async version ==== b$Page$navigate(\"https://www.whatismybrowser.com/\", wait_ = FALSE) b$Page$loadEventFired(wait_ = FALSE)$   then(function(value) {     b$Runtime$evaluate(       'document.querySelector(\".corset .string-major a\").innerText'     )   })$   then(function(value) {     print(value$result$value)   }) # ==== Synchronous version ==== b$Page$navigate(\"https://www.whatismybrowser.com/\") x <- b$DOM$getDocument() x <- b$DOM$querySelector(x$root$nodeId, \".corset .string-major a\") b$DOM$getOuterHTML(x$nodeId) #> $outerHTML #> [1] \"<a href=\\\"/detect/what-version-of-chrome-do-i-have\\\">Chrome 75 on macOS (Mojave)<\/a>\"   # ==== Async version ==== b$Page$navigate(\"https://www.whatismybrowser.com/\", wait_ = FALSE) b$Page$loadEventFired(wait_ = FALSE)$   then(function(value) {     b$DOM$getDocument()   })$   then(function(value) {     b$DOM$querySelector(value$root$nodeId, \".corset .string-major a\")   })$   then(function(value) {     b$DOM$getOuterHTML(value$nodeId)   })$   then(function(value) {     print(value)   })"},{"path":"http://rstudio.github.io/chromote/index.html","id":"websites-that-require-authentication","dir":"","previous_headings":"Examples","what":"Websites that require authentication","title":"Headless Chrome Web Browser Interface","text":"websites require authentication, can use Chromote get screenshots following: Log interactively navigate page. Capture cookies page save . later R session, load cookies. Use cookies Chromote navigate page. Take screenshot. two ways capture cookies. Method 1: first method uses headless browser’s viewer. can bit inconvenient requires going entire login process, even already logged normal browser. First navigate page: Next, log interactively via viewer. ’s done, use Chromote capture cookies. saving cookies, can restart R navigate page, using cookies. Method 2: second method captures cookies using normal browser. can convenient , already logged , don’t need . requires Chromium-based browser, requires running DevTools--DevTools browser. First, navigate page browser. press CMD-Option-(Mac) Ctrl-Shift-(Windows/Linux). developer tools panel open. Make sure undock developer tools window. press CMD-Option-Ctrl-Shift-. second developer tools window open. (See answer detailed instructions.) second developer tools window, run following: return JSON string representing cookies page. example: Copy string clipboard. R session, can paste code, surrounded single-quotes: can use Chromote navigate page take screenshot.","code":"library(chromote) b <- ChromoteSession$new() b$view() b$Page$navigate(\"https://beta.rstudioconnect.com/content/123456/\") cookies <- b$Network$getCookies() str(cookies) saveRDS(cookies, \"cookies.rds\") library(chromote) b <- ChromoteSession$new() b$view() cookies <- readRDS(\"cookies.rds\") b$Network$setCookies(cookies = cookies$cookies) # Navigate to the app that requires a login b$Page$navigate(\"https://beta.rstudioconnect.com/content/123456/\") b$screenshot() var cookies = await Main.sendOverProtocol('Network.getCookies', {}) JSON.stringify(cookies) [{\"cookies\":[{\"name\":\"AWSALB\",\"value\":\"T3dNdcdnMasdf/cNn0j+JHMVkZ3RI8mitnAggd9AlPsaWJdsfoaje/OowIh0qe3dDPiHc0mSafe5jNH+1Aeinfalsd30AejBZDYwE\",\"domain\":\"beta.rstudioconnect.com\",\"path\":\"/\",\"expires\":1594632233.96943,\"size\":130,\"httpOnly\":false,\"secure\":false,\"session\":false}]}] cookie_json <- '[{\"cookies\":[{\"name\":\"AWSALB\",\"value\":\"T3dNdcdnMasdf/cNn0j+JHMVkZ3RI8mitnAggd9AlPsaWJdsfoaje/OowIh0qe3dDPiHc0mSafe5jNH+1Aeinfalsd30AejBZDYwE\",\"domain\":\"beta.rstudioconnect.com\",\"path\":\"/\",\"expires\":1594632233.96943,\"size\":130,\"httpOnly\":false,\"secure\":false,\"session\":false}]}]'  cookies <- jsonlite::fromJSON(cookie_json, simplifyVector = FALSE)[[1]] library(chromote) b <- ChromoteSession$new() b$view() b$Network$setCookies(cookies = cookies$cookies) b$Page$navigate(\"https://beta.rstudioconnect.com/content/123456/\") b$screenshot()"},{"path":"http://rstudio.github.io/chromote/reference/Browser.html","id":null,"dir":"Reference","previous_headings":"","what":"Browser base class — Browser","title":"Browser base class — Browser","text":"Browser base class Browser base class","code":""},{"path":"http://rstudio.github.io/chromote/reference/Browser.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Browser base class — Browser","text":"Base class browsers like Chrome, Chromium, etc. Defines interface used various browser implementations. can represent local browser process one running remotely. initialize() method implementation set private$host private$port. process local, initialize() method also set private$process.","code":""},{"path":[]},{"path":"http://rstudio.github.io/chromote/reference/Browser.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Browser base class — Browser","text":"Browser$is_local() Browser$get_process() Browser$get_host() Browser$get_port() Browser$close() Browser$clone()","code":""},{"path":"http://rstudio.github.io/chromote/reference/Browser.html","id":"method-is-local-","dir":"Reference","previous_headings":"","what":"Method is_local()","title":"Browser base class — Browser","text":"local browser? Returns TRUE browser running locally, FALSE remote.","code":""},{"path":"http://rstudio.github.io/chromote/reference/Browser.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Browser base class — Browser","text":"","code":"Browser$is_local()"},{"path":"http://rstudio.github.io/chromote/reference/Browser.html","id":"method-get-process-","dir":"Reference","previous_headings":"","what":"Method get_process()","title":"Browser base class — Browser","text":"Browser process","code":""},{"path":"http://rstudio.github.io/chromote/reference/Browser.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Browser base class — Browser","text":"","code":"Browser$get_process()"},{"path":"http://rstudio.github.io/chromote/reference/Browser.html","id":"method-get-host-","dir":"Reference","previous_headings":"","what":"Method get_host()","title":"Browser base class — Browser","text":"Browser Host","code":""},{"path":"http://rstudio.github.io/chromote/reference/Browser.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Browser base class — Browser","text":"","code":"Browser$get_host()"},{"path":"http://rstudio.github.io/chromote/reference/Browser.html","id":"method-get-port-","dir":"Reference","previous_headings":"","what":"Method get_port()","title":"Browser base class — Browser","text":"Browser port","code":""},{"path":"http://rstudio.github.io/chromote/reference/Browser.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Browser base class — Browser","text":"","code":"Browser$get_port()"},{"path":"http://rstudio.github.io/chromote/reference/Browser.html","id":"method-close-","dir":"Reference","previous_headings":"","what":"Method close()","title":"Browser base class — Browser","text":"Close browser","code":""},{"path":"http://rstudio.github.io/chromote/reference/Browser.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Browser base class — Browser","text":"","code":"Browser$close()"},{"path":"http://rstudio.github.io/chromote/reference/Browser.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Browser base class — Browser","text":"objects class cloneable method.","code":""},{"path":"http://rstudio.github.io/chromote/reference/Browser.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Browser base class — Browser","text":"","code":"Browser$clone(deep = FALSE)"},{"path":"http://rstudio.github.io/chromote/reference/Browser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Browser base class — Browser","text":"deep Whether make deep clone.","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chrome.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Chrome process — Chrome","title":"Local Chrome process — Chrome","text":"Local Chrome process Local Chrome process","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chrome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Local Chrome process — Chrome","text":"subclass Browser represents local browser. extends Browser class processx::process object, represents browser's system process.","code":""},{"path":[]},{"path":"http://rstudio.github.io/chromote/reference/Chrome.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Local Chrome process — Chrome","text":"chromote::Browser -> Chrome","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chrome.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Local Chrome process — Chrome","text":"chromote::Browser$close() chromote::Browser$get_host() chromote::Browser$get_port() chromote::Browser$get_process() chromote::Browser$is_local()","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chrome.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Local Chrome process — Chrome","text":"Chrome$new() Chrome$get_path() Chrome$clone()","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chrome.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Local Chrome process — Chrome","text":"Create new Chrome object.","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chrome.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Chrome process — Chrome","text":"","code":"Chrome$new(path = find_chrome(), args = get_chrome_args())"},{"path":"http://rstudio.github.io/chromote/reference/Chrome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Chrome process — Chrome","text":"path Location chrome installation args character vector command-line arguments passed initializing Chrome. Single -arguments passed single values (e.g.\"--disable-gpu\"), arguments value given nested character vector (e.g. c(\"--force-color-profile\", \"srgb\")). See list possible arguments. Defaults get_chrome_args().","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chrome.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Local Chrome process — Chrome","text":"new Chrome object.","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chrome.html","id":"method-get-path-","dir":"Reference","previous_headings":"","what":"Method get_path()","title":"Local Chrome process — Chrome","text":"Browser application path","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chrome.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Chrome process — Chrome","text":"","code":"Chrome$get_path()"},{"path":"http://rstudio.github.io/chromote/reference/Chrome.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Local Chrome process — Chrome","text":"objects class cloneable method.","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chrome.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Chrome process — Chrome","text":"","code":"Chrome$clone(deep = FALSE)"},{"path":"http://rstudio.github.io/chromote/reference/Chrome.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Chrome process — Chrome","text":"deep Whether make deep clone.","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromeRemote.html","id":null,"dir":"Reference","previous_headings":"","what":"Remote Chrome process — ChromeRemote","title":"Remote Chrome process — ChromeRemote","text":"Remote Chrome process Remote Chrome process","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromeRemote.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Remote Chrome process — ChromeRemote","text":"chromote::Browser -> ChromeRemote","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromeRemote.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Remote Chrome process — ChromeRemote","text":"chromote::Browser$close() chromote::Browser$get_host() chromote::Browser$get_port() chromote::Browser$get_process() chromote::Browser$is_local()","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromeRemote.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Remote Chrome process — ChromeRemote","text":"ChromeRemote$new() ChromeRemote$clone()","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromeRemote.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Remote Chrome process — ChromeRemote","text":"Create new ChromeRemote object.","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromeRemote.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote Chrome process — ChromeRemote","text":"","code":"ChromeRemote$new(host, port)"},{"path":"http://rstudio.github.io/chromote/reference/ChromeRemote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote Chrome process — ChromeRemote","text":"host string valid IPv4 IPv6 address. \"0.0.0.0\" represents IPv4 addresses \"::/0\" represents IPv6 addresses. port number integer indicates server port.","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromeRemote.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Remote Chrome process — ChromeRemote","text":"objects class cloneable method.","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromeRemote.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote Chrome process — ChromeRemote","text":"","code":"ChromeRemote$clone(deep = FALSE)"},{"path":"http://rstudio.github.io/chromote/reference/ChromeRemote.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote Chrome process — ChromeRemote","text":"deep Whether make deep clone.","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":null,"dir":"Reference","previous_headings":"","what":"Chromote class — Chromote","title":"Chromote class — Chromote","text":"Chromote class Chromote class","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Chromote class — Chromote","text":"class represents browser whole. Chromote object represents browser whole, can multiple targets, represent browser tab. Chrome DevTools Protocol, target can one debugging sessions control . ChromoteSession object represents single session. Chromote object can number ChromoteSession objects children. necessary create Chromote object manually. can simply call:   automatically create Chromote object one already created. chromote package designate Chromote object default Chromote object package, future calls ChromoteSession$new() automatically use Chromote. start new browser every ChromoteSession object created.","code":"b <- ChromoteSession$new()"},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Chromote class — Chromote","text":"default_timeout Default timeout seconds chromote wait Chrome DevTools Protocol response. protocol Dynamic protocol implementation. expert use !","code":""},{"path":[]},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Chromote class — Chromote","text":"Chromote$new() Chromote$view() Chromote$get_auto_events() Chromote$get_child_loop() Chromote$wait_for() Chromote$new_session() Chromote$get_sessions() Chromote$register_session() Chromote$send_command() Chromote$invoke_event_callbacks() Chromote$debug_messages() Chromote$debug_log() Chromote$url() Chromote$is_active() Chromote$get_browser() Chromote$close()","code":""},{"path":[]},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromote class — Chromote","text":"","code":"Chromote$new(browser = Chrome$new(), multi_session = TRUE, auto_events = TRUE)"},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chromote class — Chromote","text":"browser Browser object multi_session multiple sessions allowed? auto_events TRUE, enable automatic event enabling/disabling; FALSE, disable automatic event enabling/disabling.","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"method-view-","dir":"Reference","previous_headings":"","what":"Method view()","title":"Chromote class — Chromote","text":"Display current session browser Chrome browser used, method open new tab using Chrome browser. using Chrome browser, set options(browser=) change default behavior browseURL().","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromote class — Chromote","text":"","code":"Chromote$view()"},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"method-get-auto-events-","dir":"Reference","previous_headings":"","what":"Method get_auto_events()","title":"Chromote class — Chromote","text":"auto_events value. internal use .","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromote class — Chromote","text":"","code":"Chromote$get_auto_events()"},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"method-get-child-loop-","dir":"Reference","previous_headings":"","what":"Method get_child_loop()","title":"Chromote class — Chromote","text":"Local later loop. expert async usage .","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromote class — Chromote","text":"","code":"Chromote$get_child_loop()"},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"method-wait-for-","dir":"Reference","previous_headings":"","what":"Method wait_for()","title":"Chromote class — Chromote","text":"Wait promise resolves Blocks R session promise (p) resolved. loop $get_child_loop() advance just far enough promise resolve.","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromote class — Chromote","text":"","code":"Chromote$wait_for(p)"},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chromote class — Chromote","text":"p promise resolve.","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"method-new-session-","dir":"Reference","previous_headings":"","what":"Method new_session()","title":"Chromote class — Chromote","text":"Create new tab / window","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromote class — Chromote","text":"","code":"Chromote$new_session(width = 992, height = 1323, targetId = NULL, wait_ = TRUE)"},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chromote class — Chromote","text":"width, height Width height new window. targetId Target ID existing target attach . targetId provided, width height arguments ignored. NULL (default) new target created attached , width height arguments determine viewport size. wait_ FALSE, return promises::promise() new ChromoteSession object. Otherwise, block initialization, return ChromoteSession object directly.","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"method-get-sessions-","dir":"Reference","previous_headings":"","what":"Method get_sessions()","title":"Chromote class — Chromote","text":"Retrieve ChromoteSession objects","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromote class — Chromote","text":"","code":"Chromote$get_sessions()"},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Chromote class — Chromote","text":"list ChromoteSession objects","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"method-register-session-","dir":"Reference","previous_headings":"","what":"Method register_session()","title":"Chromote class — Chromote","text":"Register ChromoteSession object","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromote class — Chromote","text":"","code":"Chromote$register_session(session)"},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chromote class — Chromote","text":"session ChromoteSession object internal use .","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"method-send-command-","dir":"Reference","previous_headings":"","what":"Method send_command()","title":"Chromote class — Chromote","text":"Send command Chrome DevTools Protocol. expert use .","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromote class — Chromote","text":"","code":"Chromote$send_command(   msg,   callback = NULL,   error = NULL,   timeout = NULL,   sessionId = NULL )"},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chromote class — Chromote","text":"msg JSON-serializable list containing method, params. callback Method run command finishes successfully. error Method run error occurs. timeout Number milliseconds Chrome DevTools Protocol execute method. sessionId Determines ChromoteSession corresponding send command .","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"method-invoke-event-callbacks-","dir":"Reference","previous_headings":"","what":"Method invoke_event_callbacks()","title":"Chromote class — Chromote","text":"Immediately call event callback methods. internal use .","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromote class — Chromote","text":"","code":"Chromote$invoke_event_callbacks(event, params)"},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chromote class — Chromote","text":"event single event string params list parameters pass event callback methods.","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"method-debug-messages-","dir":"Reference","previous_headings":"","what":"Method debug_messages()","title":"Chromote class — Chromote","text":"Enable disable message debugging enabled, R print ","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromote class — Chromote","text":"","code":"Chromote$debug_messages(value = NULL)"},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chromote class — Chromote","text":"value TRUE, enable debugging. FALSE, disable debugging.","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"method-debug-log-","dir":"Reference","previous_headings":"","what":"Method debug_log()","title":"Chromote class — Chromote","text":"Submit debug log message","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chromote class — Chromote","text":"","code":"b <- ChromoteSession$new() b$parent$debug_messages(TRUE) b$Page$navigate(\"https://www.r-project.org/\") #> SEND {\"method\":\"Page.navigate\",\"params\":{\"url\":\"https://www.r-project.org/\"}| __truncated__} # Turn off debug messages b$parent$debug_messages(FALSE)"},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromote class — Chromote","text":"","code":"Chromote$debug_log(...)"},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chromote class — Chromote","text":"... Arguments pasted together paste0(..., collapse = \"\").","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"method-url-","dir":"Reference","previous_headings":"","what":"Method url()","title":"Chromote class — Chromote","text":"Create url given path","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromote class — Chromote","text":"","code":"Chromote$url(path = NULL)"},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chromote class — Chromote","text":"path path string append host port","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"method-is-active-","dir":"Reference","previous_headings":"","what":"Method is_active()","title":"Chromote class — Chromote","text":"Retrieve active status initialized, value returned TRUE. $close() called, value FALSE.","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromote class — Chromote","text":"","code":"Chromote$is_active()"},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"method-get-browser-","dir":"Reference","previous_headings":"","what":"Method get_browser()","title":"Chromote class — Chromote","text":"Retrieve Browser` object","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromote class — Chromote","text":"","code":"Chromote$get_browser()"},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"method-close-","dir":"Reference","previous_headings":"","what":"Method close()","title":"Chromote class — Chromote","text":"Close Browser object","code":""},{"path":"http://rstudio.github.io/chromote/reference/Chromote.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Chromote class — Chromote","text":"","code":"Chromote$close()"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":null,"dir":"Reference","previous_headings":"","what":"ChromoteSession class — ChromoteSession","title":"ChromoteSession class — ChromoteSession","text":"ChromoteSession class ChromoteSession class","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"ChromoteSession class — ChromoteSession","text":"parent Chromote object default_timeout Default timeout seconds chromote wait Chrome DevTools Protocol response. protocol Dynamic protocol implementation. expert use !","code":""},{"path":[]},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"ChromoteSession class — ChromoteSession","text":"ChromoteSession$new() ChromoteSession$view() ChromoteSession$close() ChromoteSession$screenshot() ChromoteSession$screenshot_pdf() ChromoteSession$new_session() ChromoteSession$get_session_id() ChromoteSession$wait_for() ChromoteSession$debug_log() ChromoteSession$get_child_loop() ChromoteSession$send_command() ChromoteSession$get_auto_events() ChromoteSession$invoke_event_callbacks() ChromoteSession$mark_closed() ChromoteSession$is_active() ChromoteSession$init_promise()","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"ChromoteSession class — ChromoteSession","text":"Create new ChromoteSession object.","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ChromoteSession class — ChromoteSession","text":"","code":"# Create a new `ChromoteSession` object. b <- ChromoteSession$new()  # Create a ChromoteSession with a specific height,width b <- ChromoteSession$new(height = 1080, width = 1920)  # Navigate to page b$Page$navigate(\"http://www.r-project.org/\")  # View current chromote session if (interactive()) b$view()"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ChromoteSession class — ChromoteSession","text":"","code":"ChromoteSession$new(   parent = default_chromote_object(),   width = 992,   height = 1323,   targetId = NULL,   wait_ = TRUE,   auto_events = NULL )"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ChromoteSession class — ChromoteSession","text":"parent Chromote object use; defaults default_chromote_object() width Width, pixels, Target create targetId NULL height Height, pixels, Target create targetId NULL targetId Target ID existing target attach . targetId provided, width height arguments ignored. NULL (default) new target created attached , width height arguments determine viewport size. wait_ FALSE, return promises::promise() new ChromoteSession object. Otherwise, block initialization, return ChromoteSession object directly. auto_events NULL (default), use auto_events setting parent Chromote object. TRUE, enable automatic event enabling/disabling; FALSE, disable automatic event enabling/disabling.","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"ChromoteSession class — ChromoteSession","text":"new ChromoteSession object.","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"method-view-","dir":"Reference","previous_headings":"","what":"Method view()","title":"ChromoteSession class — ChromoteSession","text":"Display current session Chromote browser. Chrome browser used, method open new tab using Chrome browser. using Chrome browser, set options(browser=) change default behavior browseURL().","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"ChromoteSession class — ChromoteSession","text":"","code":"# Create a new `ChromoteSession` object. b <- ChromoteSession$new()  # Navigate to page b$Page$navigate(\"http://www.r-project.org/\")  # View current chromote session if (interactive()) b$view()"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"ChromoteSession class — ChromoteSession","text":"","code":"ChromoteSession$view()"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"method-close-","dir":"Reference","previous_headings":"","what":"Method close()","title":"ChromoteSession class — ChromoteSession","text":"Close Chromote session.","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"ChromoteSession class — ChromoteSession","text":"","code":"# Create a new `ChromoteSession` object. b <- ChromoteSession$new()  # Navigate to page b$Page$navigate(\"http://www.r-project.org/\")  # Close current chromote session b$close()"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"ChromoteSession class — ChromoteSession","text":"","code":"ChromoteSession$close(wait_ = TRUE)"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"ChromoteSession class — ChromoteSession","text":"wait_ FALSE, return promises::promise() resolve ChromoteSession closed. Otherwise, block ChromoteSession closed.","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"method-screenshot-","dir":"Reference","previous_headings":"","what":"Method screenshot()","title":"ChromoteSession class — ChromoteSession","text":"Take PNG screenshot","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"ChromoteSession class — ChromoteSession","text":"","code":"# Create a new `ChromoteSession` object. b <- ChromoteSession$new()  # Navigate to page b$Page$navigate(\"http://www.r-project.org/\")  # Take screenshot tmppngfile <- tempfile(fileext = \".png\") is_interactive <- interactive() # Display screenshot if interactive b$screenshot(tmppngfile, show = is_interactive)  # Show screenshot file info unlist(file.info(tmppngfile))   # Take screenshot using a selector sidebar_file <- tempfile(fileext = \".png\") b$screenshot(sidebar_file, selector = \".sidebar\", show = is_interactive)  # ---------------------------- # Take screenshots in parallel  urls <- c(   \"https://www.r-project.org/\",   \"https://github.com/\",   \"https://news.ycombinator.com/\" ) # Helper method that: # 1. Navigates to the given URL # 2. Waits for the page loaded event to fire # 3. Takes a screenshot # 4. Prints a message # 5. Close the ChromoteSession screenshot_p <- function(url, filename = NULL) {   if (is.null(filename)) {     filename <- gsub(\"^.*://\", \"\", url)     filename <- gsub(\"/\", \"_\", filename)     filename <- gsub(\"\\\\.\", \"_\", filename)     filename <- sub(\"_$\", \"\", filename)     filename <- paste0(filename, \".png\")   }    b2 <- b$new_session()   b2$Page$navigate(url, wait_ = FALSE)   b2$Page$loadEventFired(wait_ = FALSE)$     then(function(value) {       b2$screenshot(filename, wait_ = FALSE)     })$     then(function(value) {       message(filename)     })$     finally(function() {       b2$close()     }) }  # Take multiple screenshots simultaneously ps <- lapply(urls, screenshot_p) pa <- promises::promise_all(.list = ps)$then(function(value) {   message(\"Done!\") })  # Block the console until the screenshots finish (optional) b$wait_for(pa) #> www_r-project_org.png #> github_com.png #> news_ycombinator_com.png #> Done!"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"ChromoteSession class — ChromoteSession","text":"","code":"ChromoteSession$screenshot(   filename = \"screenshot.png\",   selector = \"html\",   cliprect = NULL,   region = c(\"content\", \"padding\", \"border\", \"margin\"),   expand = NULL,   scale = 1,   show = FALSE,   delay = 0.5,   options = list(),   wait_ = TRUE )"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"ChromoteSession class — ChromoteSession","text":"filename File path save screenshot. format screenshot inferred file extension; use options = list(format = \"jpeg\") manually choose format. See Page.captureScreenshot supported formats; time release format options \"png\" (default), \"jpeg\", \"webp\". selector CSS selector use screenshot. cliprect list containing x, y, width, height. See Page.Viewport information. provided, selector expand ignored. provide scale, use scale parameter. region CSS region use screenshot. expand Extra pixels expand screenshot. May single value numeric vector top, right, bottom, left values. scale Page scale factor show TRUE, screenshot displayed viewer. delay number seconds wait taking screenshot resizing page. complicated pages, may need increased. options Additional options passed Page.captureScreenshot. wait_ FALSE, return promises::promise() resolve ChromoteSession saved screenshot. Otherwise, block ChromoteSession saved screenshot.","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"method-screenshot-pdf-","dir":"Reference","previous_headings":"","what":"Method screenshot_pdf()","title":"ChromoteSession class — ChromoteSession","text":"Take PDF screenshot","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"ChromoteSession class — ChromoteSession","text":"","code":"# Create a new `ChromoteSession` object. b <- ChromoteSession$new()  # Navigate to page b$Page$navigate(\"http://www.r-project.org/\")  # Take screenshot tmppdffile <- tempfile(fileext = \".pdf\") b$screenshot_pdf(tmppdffile)  # Show PDF file info unlist(file.info(tmppdffile))"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"ChromoteSession class — ChromoteSession","text":"","code":"ChromoteSession$screenshot_pdf(   filename = \"screenshot.pdf\",   pagesize = \"letter\",   margins = 0.5,   units = c(\"in\", \"cm\"),   landscape = FALSE,   display_header_footer = FALSE,   print_background = FALSE,   scale = 1,   wait_ = TRUE )"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"ChromoteSession class — ChromoteSession","text":"filename File path save screenshot. pagesize single character value set \"letter\", \"legal\", \"tabloid\", \"ledger\" \"a0\" \"a1\". numeric vector c(width, height) specifying page size. margins numeric vector c(top, right, bottom, left) specifying page margins. units Page margin size units. Either \"\" \"cm\" inches centimeters respectively. landscape Paper orientation. display_header_footer Display header footer. print_background Print background graphics. scale Page scale factor. wait_ FALSE, return promises::promise() resolve ChromoteSession saved screenshot. Otherwise, block ChromoteSession saved screnshot.","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"method-new-session-","dir":"Reference","previous_headings":"","what":"Method new_session()","title":"ChromoteSession class — ChromoteSession","text":"Create new tab / window","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"ChromoteSession class — ChromoteSession","text":"","code":"b1 <- ChromoteSession$new() b1$Page$navigate(\"http://www.google.com\") b2 <- b1$new_session() b2$Page$navigate(\"http://www.r-project.org/\") b1$Runtime$evaluate(\"window.location\", returnByValue = TRUE)$result$value$href #> [1] \"https://www.google.com/\" b2$Runtime$evaluate(\"window.location\", returnByValue = TRUE)$result$value$href #> [1] \"https://www.r-project.org/\""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"ChromoteSession class — ChromoteSession","text":"","code":"ChromoteSession$new_session(   width = 992,   height = 1323,   targetId = NULL,   wait_ = TRUE )"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"ChromoteSession class — ChromoteSession","text":"width, height Width height new window. targetId Target ID existing target attach . targetId provided, width height arguments ignored. NULL (default) new target created attached , width height arguments determine viewport size. wait_ FALSE, return promises::promise() resolve ChromoteSession created new session. Otherwise, block ChromoteSession created new session.","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"method-get-session-id-","dir":"Reference","previous_headings":"","what":"Method get_session_id()","title":"ChromoteSession class — ChromoteSession","text":"Retrieve session id","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"ChromoteSession class — ChromoteSession","text":"","code":"b <- ChromoteSession$new() b$get_session_id() #> [1] \"05764F1D439F4292497A21C6526575DA\""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"ChromoteSession class — ChromoteSession","text":"","code":"ChromoteSession$get_session_id()"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"method-wait-for-","dir":"Reference","previous_headings":"","what":"Method wait_for()","title":"ChromoteSession class — ChromoteSession","text":"Wait Chromote Session finish. method block R session provided promise resolves. loop $get_child_loop() advance just far enough promise resolve.","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"ChromoteSession class — ChromoteSession","text":"","code":"b <- ChromoteSession$new()  # Async with promise p <- b$Browser$getVersion(wait_ = FALSE) p$then(str)  # Async with callback b$Browser$getVersion(wait_ = FALSE, callback_ = str)"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"ChromoteSession class — ChromoteSession","text":"","code":"ChromoteSession$wait_for(p)"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"ChromoteSession class — ChromoteSession","text":"p promise resolve.","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"method-debug-log-","dir":"Reference","previous_headings":"","what":"Method debug_log()","title":"ChromoteSession class — ChromoteSession","text":"Send debug log message parent Chromote object","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"examples-8","dir":"Reference","previous_headings":"","what":"Examples","title":"ChromoteSession class — ChromoteSession","text":"","code":"b <- ChromoteSession$new() b$parent$debug_messages(TRUE) b$Page$navigate(\"https://www.r-project.org/\") #> SEND {\"method\":\"Page.navigate\",\"params\":{\"url\":\"https://www.r-project.org/\"}| __truncated__} # Turn off debug messages b$parent$debug_messages(FALSE)"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"ChromoteSession class — ChromoteSession","text":"","code":"ChromoteSession$debug_log(...)"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"ChromoteSession class — ChromoteSession","text":"... Arguments pasted together paste0(..., collapse = \"\").","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"method-get-child-loop-","dir":"Reference","previous_headings":"","what":"Method get_child_loop()","title":"ChromoteSession class — ChromoteSession","text":"later loop. expert async usage .","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"ChromoteSession class — ChromoteSession","text":"","code":"ChromoteSession$get_child_loop()"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"method-send-command-","dir":"Reference","previous_headings":"","what":"Method send_command()","title":"ChromoteSession class — ChromoteSession","text":"Send command Chrome DevTools Protocol. expert use .","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"ChromoteSession class — ChromoteSession","text":"","code":"ChromoteSession$send_command(   msg,   callback = NULL,   error = NULL,   timeout = NULL )"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"ChromoteSession class — ChromoteSession","text":"msg JSON-serializable list containing method, params. callback Method run command finishes successfully. error Method run error occurs. timeout Number milliseconds Chrome DevTools Protocol execute method.","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"method-get-auto-events-","dir":"Reference","previous_headings":"","what":"Method get_auto_events()","title":"ChromoteSession class — ChromoteSession","text":"Resolved auto_events value. internal use .","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"ChromoteSession class — ChromoteSession","text":"","code":"ChromoteSession$get_auto_events()"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"method-invoke-event-callbacks-","dir":"Reference","previous_headings":"","what":"Method invoke_event_callbacks()","title":"ChromoteSession class — ChromoteSession","text":"Immediately call event callback methods. internal use .","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"ChromoteSession class — ChromoteSession","text":"","code":"ChromoteSession$invoke_event_callbacks(event, params)"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"ChromoteSession class — ChromoteSession","text":"event single event string params list parameters pass event callback methods.","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"method-mark-closed-","dir":"Reference","previous_headings":"","what":"Method mark_closed()","title":"ChromoteSession class — ChromoteSession","text":"Disable callbacks given session. internal use .","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"ChromoteSession class — ChromoteSession","text":"","code":"ChromoteSession$mark_closed()"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"method-is-active-","dir":"Reference","previous_headings":"","what":"Method is_active()","title":"ChromoteSession class — ChromoteSession","text":"Retrieve active status initialized, value returned TRUE. $close() called, value FALSE.","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"ChromoteSession class — ChromoteSession","text":"","code":"ChromoteSession$is_active()"},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"method-init-promise-","dir":"Reference","previous_headings":"","what":"Method init_promise()","title":"ChromoteSession class — ChromoteSession","text":"Initial promise internal use .","code":""},{"path":"http://rstudio.github.io/chromote/reference/ChromoteSession.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"ChromoteSession class — ChromoteSession","text":"","code":"ChromoteSession$init_promise()"},{"path":"http://rstudio.github.io/chromote/reference/chromote-package.html","id":null,"dir":"Reference","previous_headings":"","what":"chromote: Headless Chrome Web Browser Interface — chromote-package","title":"chromote: Headless Chrome Web Browser Interface — chromote-package","text":"implementation 'Chrome DevTools Protocol', controlling headless Chrome web browser.","code":""},{"path":[]},{"path":"http://rstudio.github.io/chromote/reference/chromote-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"chromote: Headless Chrome Web Browser Interface — chromote-package","text":"Maintainer: Winston Chang winston@posit.co Authors: Barret Schloerke barret@posit.co (ORCID) contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"http://rstudio.github.io/chromote/reference/default_chrome_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Chrome arguments — default_chrome_args","title":"Default Chrome arguments — default_chrome_args","text":"character vector command-line arguments passed initializing new instance Chrome. Single -arguments passed single values (e.g.\"--disable-gpu\"), arguments value given nested character vector (e.g. c(\"--force-color-profile\", \"srgb\")). See list possible arguments.","code":""},{"path":"http://rstudio.github.io/chromote/reference/default_chrome_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Chrome arguments — default_chrome_args","text":"","code":"default_chrome_args()  get_chrome_args()  set_chrome_args(args)"},{"path":"http://rstudio.github.io/chromote/reference/default_chrome_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Chrome arguments — default_chrome_args","text":"args character vector command-line arguments (NULL) used every new ChromoteSession.","code":""},{"path":"http://rstudio.github.io/chromote/reference/default_chrome_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Chrome arguments — default_chrome_args","text":"character vector default command-line arguments used every new ChromoteSession","code":""},{"path":"http://rstudio.github.io/chromote/reference/default_chrome_args.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default Chrome arguments — default_chrome_args","text":"Default chromote arguments composed following values (appropriate): \"--disable-gpu\" Disables GPU hardware acceleration. software renderer place, GPU process launch. \"---sandbox\" added CI system environment variable set, user Linux system set, executing inside Docker container. Disables sandbox process types normally sandboxed. Meant used browser-level switch testing purposes \"--disable-dev-shm-usage\" added CI system environment variable set inside docker instance. /dev/shm partition small certain VM environments, causing Chrome fail crash \"--force-color-profile=srgb\" means screenshots taken laptop plugged external monitor often subtly different colors one taken laptop using built-monitor. problem even likely across machines. Force monitors treated though specified color profile. \"--disable-extensions\" Disable extensions. \"--mute-audio\" Mutes audio sent audio device audible automated testing","code":""},{"path":"http://rstudio.github.io/chromote/reference/default_chrome_args.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Default Chrome arguments — default_chrome_args","text":"default_chrome_args(): Returns character vector command-line arguments passed initializing Chrome. See Details information. get_chrome_args(): Retrieves default command-line arguments passed Chrome initialization. Returns either NULL character vector. set_chrome_args(): Sets default command-line arguments passed initializing. Returns updated defaults.","code":""},{"path":"http://rstudio.github.io/chromote/reference/default_chrome_args.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default Chrome arguments — default_chrome_args","text":"","code":"old_chrome_args <- get_chrome_args()  # Only disable the gpu and using `/dev/shm` set_chrome_args(c(\"--disable-gpu\", \"--disable-dev-shm-usage\"))  #... Make new `Chrome` or `ChromoteSession` instance  # Restore old defaults set_chrome_args(old_chrome_args)"},{"path":"http://rstudio.github.io/chromote/reference/default_chromote_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Chromote object — default_chromote_object","title":"Default Chromote object — default_chromote_object","text":"Returns Chromote package's default Chromote object. currently default Chromote object active, one created set default.","code":""},{"path":"http://rstudio.github.io/chromote/reference/default_chromote_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Chromote object — default_chromote_object","text":"","code":"default_chromote_object()  has_default_chromote_object()  set_default_chromote_object(x)"},{"path":"http://rstudio.github.io/chromote/reference/default_chromote_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Chromote object — default_chromote_object","text":"x Chromote object.","code":""},{"path":"http://rstudio.github.io/chromote/reference/default_chromote_object.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default Chromote object — default_chromote_object","text":"ChromoteSession$new() calls function default, parent specified. means ChromoteSession$new() called currently active default Chromote object, new Chromote object created set default.","code":""},{"path":"http://rstudio.github.io/chromote/reference/find_chrome.html","id":null,"dir":"Reference","previous_headings":"","what":"Find path to Chrome or Chromium browser — find_chrome","title":"Find path to Chrome or Chromium browser — find_chrome","text":"chromote requires Chrome- Chromium-based browser support Chrome DevTools Protocol. many browser variants, including Google Chrome, Chromium, Microsoft Edge others. want chromote use specific browser, set CHROMOTE_CHROME environment variable full path browser's executable. Note CHROMOTE_CHROME set, chromote use value without additional checks. Mac, example, one use Microsoft Edge setting CHROMOTE_CHROME following:   CHROMOTE_CHROME set, find_chrome() perform limited search find reasonable executable. Windows, find_chrome() consults registry find chrome.exe. Mac, looks Google Chrome /Applications folder (tries checks Linux). Linux, searches several common executable names.","code":"Sys.setenv(   CHROMOTE_CHROME = \"/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge\" )"},{"path":"http://rstudio.github.io/chromote/reference/find_chrome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find path to Chrome or Chromium browser — find_chrome","text":"","code":"find_chrome()"},{"path":"http://rstudio.github.io/chromote/reference/find_chrome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find path to Chrome or Chromium browser — find_chrome","text":"character vector value CHROMOTE_CHROME, path discovered Chrome executable. path found, find_chrome() returns NULL.","code":""},{"path":"http://rstudio.github.io/chromote/reference/find_chrome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find path to Chrome or Chromium browser — find_chrome","text":"","code":"find_chrome() #>            google-chrome  #> \"/usr/bin/google-chrome\""},{"path":"http://rstudio.github.io/chromote/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %>%, %T>% promises %...!%, %...>%, %...T!%, %...T>%, catch, finally, promise, ","code":""},{"path":"http://rstudio.github.io/chromote/news/index.html","id":"chromote-development-version","dir":"Changelog","previous_headings":"","what":"chromote (development version)","title":"chromote (development version)","text":"ChromoteSession$screenshot() gains options argument accepts list additional options passed Chrome Devtools Protocol’s Page.captureScreenshot method. (#129) ChromoteSession$screenshot() now infer image format filename extension. Alternatively, can specify format list passed options. (#130)","code":""},{"path":"http://rstudio.github.io/chromote/news/index.html","id":"chromote-012","dir":"Changelog","previous_headings":"","what":"chromote 0.1.2","title":"chromote 0.1.2","text":"CRAN release: 2023-08-11 Fixed #109: error occur Chromote object’s $close() method called. (#110) Fixed #99: $view() method called, recent versions Chrome display \"Debugging connection closed. Reason: WebSocket disconnected\". (#101) Fixed #89, #91: find_chrome() now checks possible binary names Chrome Chromium Linux Mac. (thanks @brianmsm @rossellhayes, #117) Fixed #22: Added new chromote.timeout global option can used set timeout (seconds) establishing connections Chrome session. (#120)","code":""},{"path":"http://rstudio.github.io/chromote/news/index.html","id":"chromote-011","dir":"Changelog","previous_headings":"","what":"chromote 0.1.1","title":"chromote 0.1.1","text":"CRAN release: 2022-09-07 Update docs CRAN (#93)","code":""},{"path":"http://rstudio.github.io/chromote/news/index.html","id":"chromote-010","dir":"Changelog","previous_headings":"","what":"chromote 0.1.0","title":"chromote 0.1.0","text":"CRAN release: 2022-04-19 Initial package release","code":""}]
